/*
 * DocRaptor
 *
 * A native client library for the DocRaptor HTML to PDF/XLS service.
 *
 * OpenAPI spec version: 2.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocRaptor.Model
{
    /// <summary>
    /// Doc
    /// </summary>
    [DataContract]
    public class Doc : IEquatable<Doc>, IValidatableObject
    {
        /// <summary>
        /// The type of document being created.
        /// </summary>
        /// <value>The type of document being created.</value>
        [DataMember(Name = "document_type", EmitDefaultValue = false)]
        public DocumentTypeEnum DocumentType { get; }
        
        /// <summary>
        /// A name for identifying your document.
        /// </summary>
        /// <value>A name for identifying your document.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; }


        /// <summary>
        /// The HTML data to be transformed into a document. You must supply content using document_content or document_url.
        /// </summary>
        /// <value>The HTML data to be transformed into a document. You must supply content using document_content or document_url. </value>
        [DataMember(Name = "document_content", EmitDefaultValue = false)]
        public string DocumentContent { get; }

        /// <summary>
        /// The URL to fetch the HTML data to be transformed into a document. You must supply content using document_content or document_url.
        /// </summary>
        /// <value>The URL to fetch the HTML data to be transformed into a document. You must supply content using document_content or document_url. </value>
        [DataMember(Name = "document_url", EmitDefaultValue = false)]
        public string DocumentUrl { get; set; }

        /// <summary>
        /// Enable test mode for this document. Test documents are not charged for but include a watermark.
        /// </summary>
        /// <value>Enable test mode for this document. Test documents are not charged for but include a watermark.</value>
        [DataMember(Name = "test", EmitDefaultValue = false)]
        public bool? Test { get; set; }

        /// <summary>
        /// Specify a specific version of the DocRaptor Pipeline to use.
        /// </summary>
        /// <value>Specify a specific version of the DocRaptor Pipeline to use.</value>
        [DataMember(Name = "pipeline", EmitDefaultValue = false)]
        public string Pipeline { get; set; }
        
        /// <summary>
        /// Failed loading of images/javascripts/stylesheets/etc. will not cause the rendering to stop.
        /// </summary>
        /// <value>Failed loading of images/javascripts/stylesheets/etc. will not cause the rendering to stop.</value>
        [DataMember(Name = "ignore_resource_errors", EmitDefaultValue = false)]
        public bool? IgnoreResourceErrors { get; set; }

        /// <summary>
        /// Prevent console.log from stopping document rendering during JavaScript execution.
        /// </summary>
        /// <value>Prevent console.log from stopping document rendering during JavaScript execution.</value>
        [DataMember(Name = "ignore_console_messages", EmitDefaultValue = false)]
        public bool? IgnoreConsoleMessages { get; set; }

        /// <summary>
        /// A field for storing a small amount of metadata with this document.
        /// </summary>
        /// <value>A field for storing a small amount of metadata with this document.</value>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public string Tag { get; set; }

        /// <summary>
        /// Request support help with this request if it succeeds.
        /// </summary>
        /// <value>Request support help with this request if it succeeds.</value>
        [DataMember(Name = "help", EmitDefaultValue = false)]
        public bool? Help { get; set; }

        /// <summary>
        /// Enable DocRaptor JavaScript parsing. PrinceXML JavaScript parsing is also available elsewhere.
        /// </summary>
        /// <value>Enable DocRaptor JavaScript parsing. PrinceXML JavaScript parsing is also available elsewhere.</value>
        [DataMember(Name = "javascript", EmitDefaultValue = false)]
        public bool? Javascript { get; set; }

        /// <summary>
        /// Set HTTP referrer when generating this document.
        /// </summary>
        /// <value>Set HTTP referrer when generating this document.</value>
        [DataMember(Name = "referrer", EmitDefaultValue = false)]
        public string Referrer { get; set; }

        /// <summary>
        /// A URL that will receive a POST request after successfully completing an asynchronous document. The POST data will include download_url and download_id similar to status API responses. WARNING: this only works on asynchronous documents.
        /// </summary>
        /// <value>A URL that will receive a POST request after successfully completing an asynchronous document. The POST data will include download_url and download_id similar to status API responses. WARNING: this only works on asynchronous documents. </value>
        [DataMember(Name = "callback_url", EmitDefaultValue = false)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// The number of times a hosted document can be downloaded.  If no limit is specified, the document will be available for an unlimited number of downloads.
        /// </summary>
        /// <value>The number of times a hosted document can be downloaded.  If no limit is specified, the document will be available for an unlimited number of downloads.</value>
        [DataMember(Name = "hosted_download_limit", EmitDefaultValue = false)]
        public int? HostedDownloadLimit { get; set; }

        /// <summary>
        /// The date and time at which a hosted document will be removed and no longer available. Must be a properly formatted ISO 8601 datetime, like 1981-01-23T08:02:30-05:00.
        /// </summary>
        /// <value>The date and time at which a hosted document will be removed and no longer available. Must be a properly formatted ISO 8601 datetime, like 1981-01-23T08:02:30-05:00.</value>
        [DataMember(Name = "hosted_expires_at", EmitDefaultValue = false)]
        public string HostedExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets PrinceOptions
        /// </summary>
        [DataMember(Name = "prince_options", EmitDefaultValue = false)]
        public PrinceOptions PrinceOptions { get; set; }

        /// <summary>
        /// Force strict HTML validation.
        /// </summary>
        /// <value>Force strict HTML validation.</value>
        [DataMember(Name = "strict", EmitDefaultValue = false)]
        public StrictEnum? Strict { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Doc" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Doc() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Doc" /> class.
        /// </summary>
        /// <param name="name">A name for identifying your document. (required).</param>
        /// <param name="documentType">The type of document being created. (required).</param>
        /// <param name="documentContent">The HTML data to be transformed into a document. You must supply content using document_content or document_url.  (required).</param>
        /// <param name="documentUrl">The URL to fetch the HTML data to be transformed into a document. You must supply content using document_content or document_url. .</param>
        /// <param name="test">Enable test mode for this document. Test documents are not charged for but include a watermark. (default to true).</param>
        /// <param name="pipeline">Specify a specific version of the DocRaptor Pipeline to use.</param>
        /// <param name="strict">Force strict HTML validation..</param>
        /// <param name="ignoreResourceErrors">Failed loading of images/javascripts/stylesheets/etc. will not cause the rendering to stop. (default to true).</param>
        /// <param name="ignoreConsoleMessages">Prevent console.log from stopping document rendering during JavaScript execution. (default to false).</param>
        /// <param name="tag">A field for storing a small amount of metadata with this document.</param>
        /// <param name="help">Request support help with this request if it succeeds. (default to false).</param>
        /// <param name="javascript">Enable DocRaptor JavaScript parsing. PrinceXML JavaScript parsing is also available elsewhere. (default to false).</param>
        /// <param name="referrer">Set HTTP referrer when generating this document..</param>
        /// <param name="callbackUrl">A URL that will receive a POST request after successfully completing an asynchronous document. The POST data will include download_url and download_id similar to status API responses. WARNING: this only works on asynchronous documents. .</param>
        /// <param name="hostedDownloadLimit">The number of times a hosted document can be downloaded.  If no limit is specified, the document will be available for an unlimited number of downloads..</param>
        /// <param name="hostedExpiresAt">The date and time at which a hosted document will be removed and no longer available. Must be a properly formatted ISO 8601 datetime, like 1981-01-23T08:02:30-05:00..</param>
        /// <param name="princeOptions">princeOptions.</param>
        public Doc(string name, DocumentTypeEnum documentType, string documentContent, string documentUrl = default(string), bool? test = true, string pipeline = default(string), StrictEnum? strict = default(StrictEnum?), bool? ignoreResourceErrors = true, bool? ignoreConsoleMessages = false, string tag = default(string), bool? help = false, bool? javascript = false, string referrer = default(string), string callbackUrl = default(string), int? hostedDownloadLimit = default(int?), string hostedExpiresAt = default(string), PrinceOptions princeOptions = default(PrinceOptions))
        {
            Name = name ?? throw new ArgumentNullException(nameof(name), "name is a required property for Doc and cannot be null");
            DocumentType = documentType;
            DocumentContent = documentContent ?? throw new ArgumentNullException(nameof(DocumentContent), "documentContent is a required property for Doc and cannot be null");
            DocumentUrl = documentUrl;
            Test = test ?? true;
            Pipeline = pipeline;
            Strict = strict;
            IgnoreResourceErrors = ignoreResourceErrors ?? true;
            IgnoreConsoleMessages = ignoreConsoleMessages ?? false;
            Tag = tag;
            Help = help ?? false;
            Javascript = javascript ?? false;
            Referrer = referrer;
            CallbackUrl = callbackUrl;
            HostedDownloadLimit = hostedDownloadLimit;
            HostedExpiresAt = hostedExpiresAt;
            PrinceOptions = princeOptions;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Doc {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  DocumentContent: ").Append(DocumentContent).Append("\n");
            sb.Append("  DocumentUrl: ").Append(DocumentUrl).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  Pipeline: ").Append(Pipeline).Append("\n");
            sb.Append("  Strict: ").Append(Strict).Append("\n");
            sb.Append("  IgnoreResourceErrors: ").Append(IgnoreResourceErrors).Append("\n");
            sb.Append("  IgnoreConsoleMessages: ").Append(IgnoreConsoleMessages).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Help: ").Append(Help).Append("\n");
            sb.Append("  Javascript: ").Append(Javascript).Append("\n");
            sb.Append("  Referrer: ").Append(Referrer).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  HostedDownloadLimit: ").Append(HostedDownloadLimit).Append("\n");
            sb.Append("  HostedExpiresAt: ").Append(HostedExpiresAt).Append("\n");
            sb.Append("  PrinceOptions: ").Append(PrinceOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Doc);
        }

        /// <summary>
        /// Returns true if Doc instances are equal
        /// </summary>
        /// <param name="input">Instance of Doc to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Doc input)
        {
            if (input == null)
                return false;

            return
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) &&
                (
                    DocumentType == input.DocumentType ||
                    (DocumentType.Equals(input.DocumentType))
                ) &&
                (
                    DocumentContent == input.DocumentContent ||
                    (DocumentContent != null &&
                    DocumentContent.Equals(input.DocumentContent))
                ) &&
                (
                    DocumentUrl == input.DocumentUrl ||
                    (DocumentUrl != null &&
                    DocumentUrl.Equals(input.DocumentUrl))
                ) &&
                (
                    Test == input.Test ||
                    (Test != null &&
                    Test.Equals(input.Test))
                ) &&
                (
                    Pipeline == input.Pipeline ||
                    (Pipeline != null &&
                    Pipeline.Equals(input.Pipeline))
                ) &&
                (
                    Strict == input.Strict ||
                    (Strict != null &&
                    Strict.Equals(input.Strict))
                ) &&
                (
                    IgnoreResourceErrors == input.IgnoreResourceErrors ||
                    (IgnoreResourceErrors != null &&
                    IgnoreResourceErrors.Equals(input.IgnoreResourceErrors))
                ) &&
                (
                    IgnoreConsoleMessages == input.IgnoreConsoleMessages ||
                    (IgnoreConsoleMessages != null &&
                    IgnoreConsoleMessages.Equals(input.IgnoreConsoleMessages))
                ) &&
                (
                    Tag == input.Tag ||
                    (Tag != null &&
                    Tag.Equals(input.Tag))
                ) &&
                (
                    Help == input.Help ||
                    (Help != null &&
                    Help.Equals(input.Help))
                ) &&
                (
                    Javascript == input.Javascript ||
                    (Javascript != null &&
                    Javascript.Equals(input.Javascript))
                ) &&
                (
                    Referrer == input.Referrer ||
                    (Referrer != null &&
                    Referrer.Equals(input.Referrer))
                ) &&
                (
                    CallbackUrl == input.CallbackUrl ||
                    (CallbackUrl != null &&
                    CallbackUrl.Equals(input.CallbackUrl))
                ) &&
                (
                    HostedDownloadLimit == input.HostedDownloadLimit ||
                    (HostedDownloadLimit != null &&
                    HostedDownloadLimit.Equals(input.HostedDownloadLimit))
                ) &&
                (
                    HostedExpiresAt == input.HostedExpiresAt ||
                    (HostedExpiresAt != null &&
                    HostedExpiresAt.Equals(input.HostedExpiresAt))
                ) &&
                (
                    ReferenceEquals(PrinceOptions, input.PrinceOptions) ||
                    (PrinceOptions != null &&
                    PrinceOptions.Equals(input.PrinceOptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // ReSharper disable NonReadonlyMemberInGetHashCode
                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }
                hashCode = hashCode * 59 + DocumentType.GetHashCode();
                if (DocumentContent != null)
                {
                    hashCode = hashCode * 59 + DocumentContent.GetHashCode();
                }
                if (DocumentUrl != null)
                    hashCode = hashCode * 59 + DocumentUrl.GetHashCode();
                if (Test != null)
                    hashCode = hashCode * 59 + Test.GetHashCode();
                if (Pipeline != null)
                    hashCode = hashCode * 59 + Pipeline.GetHashCode();
                if (Strict != null)
                    hashCode = hashCode * 59 + Strict.GetHashCode();
                if (IgnoreResourceErrors != null)
                    hashCode = hashCode * 59 + IgnoreResourceErrors.GetHashCode();
                if (IgnoreConsoleMessages != null)
                    hashCode = hashCode * 59 + IgnoreConsoleMessages.GetHashCode();
                if (Tag != null)
                    hashCode = hashCode * 59 + Tag.GetHashCode();
                if (Help != null)
                    hashCode = hashCode * 59 + Help.GetHashCode();
                if (Javascript != null)
                    hashCode = hashCode * 59 + Javascript.GetHashCode();
                if (Referrer != null)
                    hashCode = hashCode * 59 + Referrer.GetHashCode();
                if (CallbackUrl != null)
                    hashCode = hashCode * 59 + CallbackUrl.GetHashCode();
                if (HostedDownloadLimit != null)
                    hashCode = hashCode * 59 + HostedDownloadLimit.GetHashCode();
                if (HostedExpiresAt != null)
                    hashCode = hashCode * 59 + HostedExpiresAt.GetHashCode();
                if (PrinceOptions != null)
                    hashCode = hashCode * 59 + PrinceOptions.GetHashCode();
                // ReSharper restore NonReadonlyMemberInGetHashCode
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
        
        /// <summary>
        /// Force strict HTML validation.
        /// </summary>
        /// <value>Force strict HTML validation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StrictEnum
        {

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Html for value: html
            /// </summary>
            [EnumMember(Value = "html")]
            Html = 2
        }
    }
}
